# install.packages(c("lubridate", "dplyr", "ggplot2"))
library(lubridate)
library(dplyr)
library(ggplot2)

weather <- read.csv("/cloud/project/activity04/campus_weather.csv", na.strings="#N/A")
weather$dateF <- mdy_hm(weather$Date)

# Class Work Prompt 1
weather$month <- month(weather$dateF)
weather$year <- year(weather$dateF)

Jan22 <- weather %>%
  filter(month == 1 & year == 2022)

mean(Jan22$AirTemp[1:8])

rollAveTemp <- numeric()
for(i in 8:nrow(Jan22)){
  rollAveTemp[i] <- mean(Jan22$AirTemp[(i-7):i])
}
Jan22$rollAveTemp <- rollAveTemp

# Class Work Prompt 2
weather$dateF <-mdy_hm(weather$Date)
weather$doy <- yday(weather$dateF)
weather$year <- year(weather$dateF)

ggplot(data = weather[weather$doy > 121 & weather$doy < 274 & weather$year == 2021, ],
       aes(x = dateF, y = SolRad)) +
  geom_col(color = "orange") +
  theme_classic()

# Class Work Prompt 3
weather$dateF[1] %--% weather$dateF[2]
int_length(weather$dateF[1] %--% weather$dateF[2])
interval_times <- int_length(intervals)
intervals[interval_times != 900]

timeCheck900 <- function(x){
  intervals <- x[-length(x)] %--% x[-1]
  interval_times <- int_length(intervals)
  intervals[interval_times != 900]
  
}

timeCheck900(weather$dateF)

# HW Question 1
# parse date
weather$dateF <- mdy_hm(weather$Date)
# create month column
weather$doy <- yday(weather$dateF)
# create year column
weather$year <- year(weather$dateF)

# precipitation bar plot
ggplot(data=weather[weather$doy>121 & weather$doy<274,],
       aes(x=dateF,
           y=precip))+
  labs(title="Precipitation Over Time", x="Month", y="Precipitation (mm)")+
  geom_col(color="blue")+
  theme_classic()

# exclude May and June 2021 precipitation
weather$precip.QC <- ifelse(weather$doy >= 121 & weather$doy <= 188 & weather$year == 2021,
                            NA,
                            weather$Precip)

# exclude precipitation when air temperature is below 0
weather$AirTemp.QC <- ifelse(weather$AirTemp <= 0,
                             NA,
                             weather$Precip)

# exclude precipitation when Y level and X level observations are greater than 2
weather$level.QC <- ifelse(weather$YLevel <= -2 | weather$XLevel >= 2,
                           NA,
                           weather$Precip)

# how many missing precipitation values are in the data
missing_precip <- sum(is.na(weather$precip.QC))
missing_precip

# HW Question 2
weather$BatVoltFlag <- ifelse(weather$BatVolt <= 8.5,
                              1,
                              0)

# HW Question 3
avg_SolRad <- mean (weather$SolRad)

quantile_temp <- quantile(weather$AirTemp, na.rm=TRUE)
quantile_rad <- quantile(weather$SolRad, na.rm=TRUE)

temp_threshold <- quantile_temp[4] + 5 
  as.numeric()
rad_threshold <- quantile_rad[4] + 100
  as.numeric()

abnormality_range <- function(x,y) {
  if_else(x > temp_threshold | y > rad_threshold, 1,0)}

abnormality_range(weather$AirTemp, weather$SolRad)

# HW Question 4
ggplot(data=weather[weather$doy>1 & weather$doy<90 & weather$year == 2021,],
       aes(x=dateF,
           y=AirTemp))+
  labs(title="Winter Air Temperatures 2021", x="Month", y="Air Temperature (C)")+
  geom_col(color="black")+
  theme_classic()

# HW Question 5
# shows that air temperature is currently in degrees C
metadata <- read.csv("/cloud/project/activity04/meter_weather_metadata.csv", na.strings="#N/A")

daily.values <- weather %>% 
  filter(year == 2021) %>%
  group_by(doy) %>%
  summarize(daily.precip = sum(Precip, na.rm = TRUE),
            daily.temp = min(AirTemp, na.rm = TRUE))

daily.values <- daily.values %>%
  filter(doy >= 60 & doy <= 120)


for(i in 2:nrow(daily.values)) {
  if(daily.values$daily.temp[i] < 1.67 | daily.values$daily.temp[i-1] < 1.67) {
    daily.values$daily.precip[i] <- NA
  }
}
  
total_non_na_precip <- sum(!is.na(daily.values$daily.precip))
print(total_non_na_precip)